generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" 
  url      = env("DATABASE_URL")
}

model User {
  userID    String  @id @default(uuid()) @db.Char(36)
  username  String  @db.VarChar(50)
  email     String  @db.VarChar(100)
  password  String  @db.VarChar(255)
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  Patient   Patient?
  Doctor    Doctor?
}

model Patient {
  patientID  String   @id @default(uuid()) @db.Char(36)
  userID     String   @unique @db.Char(36)
  uniqueCode String   @db.VarChar(20)
  firstname  String   @db.VarChar(100)
  lastname   String   @db.VarChar(100)
  NIC        String   @db.VarChar(20)
  dob        DateTime
  age        Int
  gender     Gender
  contact    String   @db.VarChar(15)
  address    String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  User  User      @relation(fields: [userID], references: [userID])
  HealthCard      PatientHealthCard?
  ExtraInfo       PatientExtra?
  Prescriptions   PatientPrescription[]
  MedicalRecords  PatientMedicalRecord[]
  Appointments    Appointment[]
  Billing         Billing[]

}

model Doctor {
  doctorID    String   @id @default(uuid()) @db.Char(36)
  userID      String   @unique @db.Char(36)
  firstname   String   @db.VarChar(100)
  lastname    String   @db.VarChar(100)
  specialization String @db.VarChar(100)
  contact     String   @db.VarChar(15)
  email       String   @db.VarChar(100)
  address     String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  User  User        @relation(fields: [userID], references: [userID])
  MedicalRecords   PatientMedicalRecord[]
  Appointments     Appointment[]
  Prescriptions    PatientPrescription[]
  ConsultCharts    ConsultChart[]  // Added this line to complete the relation
}

model PatientHealthCard {
  patientID         String   @unique @db.Char(36)
  healthcardID      String   @id @default(uuid()) @db.Char(36)
  healthCardStatus  HealthCardStatus
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  Patient  Patient @relation(fields: [patientID], references: [patientID])
}

model PatientExtra {
  patientID  String   @id @db.Char(36)
  allergies  String?
  immunizations String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  Patient    Patient   @relation(fields: [patientID], references: [patientID])
}

model PatientPrescription {
  prescriptionID String   @id @default(uuid()) @db.Char(36)
  patientID      String   @db.Char(36)
  doctorID       String   @db.Char(36)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  Patient        Patient   @relation(fields: [patientID], references: [patientID])
  Doctor         Doctor    @relation(fields: [doctorID], references: [doctorID])
  PrescriptionDrugs PatientPrescriptionDrug[]
  MedicalRecord  PatientMedicalRecord[]
}

model PatientPrescriptionDrug {
  prescriptionID String @db.Char(36)
  medicationID   String @db.Char(36)
  quantity       Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  Prescription  PatientPrescription  @relation(fields: [prescriptionID], references: [prescriptionID])
  Medication    DrugInventory        @relation(fields: [medicationID], references: [medicationID])

  @@id([prescriptionID, medicationID])
}

model DrugInventory {
  medicationID  String   @id @default(uuid()) @db.Char(36)
  drugName      String   @db.VarChar(100)
  details       String?
  stockLevel    Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  PrescriptionDrugs PatientPrescriptionDrug[]
}

model PatientMedicalRecord {
  recordID      String   @id @default(uuid()) @db.Char(36)
  patientID     String   @db.Char(36)
  doctorID      String   @db.Char(36)
  diagnosis     String?
  treatmentPlan String?
  prescriptionID String  @db.Char(36)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  Patient        Patient   @relation(fields: [patientID], references: [patientID])
  Doctor         Doctor    @relation(fields: [doctorID], references: [doctorID])
  Prescription   PatientPrescription @relation(fields: [prescriptionID], references: [prescriptionID])
}

model Appointment {
  appointmentID    String   @id @default(uuid()) @db.Char(36)
  patientID        String   @db.Char(36)
  doctorID         String   @db.Char(36)
  consultChartID   String   @db.Char(36)
  status           AppointmentStatus
  appointmentType  String   @db.VarChar(100)
  refund           Boolean  @default(false) 
  reschedule       Boolean  @default(false) 
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  Patient      Patient    @relation(fields: [patientID], references: [patientID])
  Doctor       Doctor     @relation(fields: [doctorID], references: [doctorID])
  ConsultChart ConsultChart @relation(fields: [consultChartID], references: [consultChartID])
  Billing      Billing?
}

model Billing {
  billingID      String   @id @default(uuid()) @db.Char(36)
  patientID      String   @db.Char(36)
  appointmentID  String   @unique @db.Char(36)
  totalAmount    Float
  paymentStatus  PaymentStatus
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  Patient     Patient    @relation(fields: [patientID], references: [patientID])
  Appointment Appointment @relation(fields: [appointmentID], references: [appointmentID])
  Payments    Payment[]
}

model Payment {
  paymentID     String   @id @default(uuid()) @db.Char(36)
  billingID     String   @db.Char(36)
  paymentMethod PaymentMethod
  paymentAmount Float
  paymentDate   DateTime @default(now())

  // Relations
  Billing    Billing   @relation(fields: [billingID], references: [billingID])
}

model Hospital {
  hospitalID   String   @id @default(uuid()) @db.Char(36)
  hospitalName String   @db.VarChar(100)
  hospitalFee  Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  ConsultCharts  ConsultChart[]
}

model ConsultChart {
  consultChartID  String @id @default(uuid()) @db.Char(36)
  doctorID        String   @db.Char(36)
  hospitalID      String   @db.Char(36)
  consultDate     DateTime
  consultTime     String
  available       Boolean  @default(true)

  // Relations
  Doctor   Doctor   @relation(fields: [doctorID], references: [doctorID])
  Hospital Hospital @relation(fields: [hospitalID], references: [hospitalID])
  Appointment Appointment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  patient
  doctor
  admin
}

enum Gender {
  Male
  Female
  Other
}

enum HealthCardStatus {
  pending
  approved
}

enum AppointmentStatus {
  scheduled
  completed
  cancelled
}

enum refund{
  true
  false
}

enum reschedule{
  true
  false
}

enum PaymentStatus {
  pending
  paid
  failed
}

enum PaymentMethod {
  credit_card
  debit_card
  cash
  insurance
  online
}

enum available {
  true
  false
}